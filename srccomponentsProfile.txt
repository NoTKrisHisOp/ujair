// src/components/Profile.jsx
import { useState, useEffect } from "react";
import { auth, storage } from "../firebase";
import { ref, uploadBytesResumable, getDownloadURL } from "firebase/storage";
import { updateProfile } from "firebase/auth";
import { useNavigate } from "react-router-dom";

export default function Profile() {
  const [user, setUser] = useState(auth.currentUser);
  const [editing, setEditing] = useState(false);
  const [file, setFile] = useState(null);
  const [name, setName] = useState(user?.displayName || "");
  const [uploading, setUploading] = useState(false);

  const navigate = useNavigate();

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged((currentUser) => {
      if (currentUser) setUser(currentUser);
      else navigate("/login");
    });
    return () => unsubscribe();
  }, [navigate]);

  const handleLogout = async () => {
    await auth.signOut();
    navigate("/login");
  };

  const handleSave = async () => {
    setUploading(true);
    try {
      let photoURL = user.photoURL;

      if (file) {
        const storageRef = ref(storage, `profilePics/${user.uid}-${file.name}`);
        const uploadTask = uploadBytesResumable(storageRef, file);

        await new Promise((resolve, reject) => {
          uploadTask.on(
            "state_changed",
            null,
            (error) => reject(error),
            async () => {
              photoURL = await getDownloadURL(uploadTask.snapshot.ref);
              resolve();
            }
          );
        });
      }

      await updateProfile(user, { displayName: name, photoURL });
      setUser({ ...user, displayName: name, photoURL });
      setEditing(false);
      setFile(null);
    } catch (error) {
      console.error(error);
    } finally {
      setUploading(false);
    }
  };

  if (!user) return null;

  return (
    <div className="max-w-3xl mx-auto mt-10 p-6">
      {/* Profile header */}
      <div className="flex items-center space-x-8">
        {/* Profile picture */}
        <div>
          <img
            src={
              file ? URL.createObjectURL(file) : user.photoURL || "/default.png"
            }
            alt="Profile"
            className="w-32 h-32 rounded-full border-4 border-blue-500 object-cover"
          />
          {editing && (
            <input
              type="file"
              accept="image/*"
              onChange={(e) => setFile(e.target.files[0])}
              className="mt-2"
            />
          )}
        </div>

        {/* User info */}
        <div className="flex-1 space-y-2">
          <div className="flex items-center space-x-4">
            {editing ? (
              <input
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                className="border p-1 rounded text-lg font-semibold"
              />
            ) : (
              <h2 className="text-2xl font-semibold">
                {user.displayName || "No Name"}
              </h2>
            )}

            {!editing && (
              <button
                onClick={() => setEditing(true)}
                className="px-3 py-1 bg-blue-500 text-white rounded"
              >
                Edit Profile
              </button>
            )}
          </div>

          {/* Stats */}
          <div className="flex space-x-6 text-gray-600 font-medium">
            <div>
              <span className="font-bold">0</span> Posts
            </div>
            <div>
              <span className="font-bold">0</span> Followers
            </div>
            <div>
              <span className="font-bold">0</span> Following
            </div>
          </div>

          {/* Save/Cancel buttons */}
          {editing && (
            <div className="mt-2 space-x-2">
              <button
                onClick={handleSave}
                disabled={uploading}
                className="px-4 py-1 bg-blue-500 text-white rounded"
              >
                {uploading ? "Uploading..." : "Save"}
              </button>
              <button
                onClick={() => {
                  setEditing(false);
                  setFile(null);
                }}
                className="px-4 py-1 bg-gray-300 rounded"
              >
                Cancel
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Logout button */}
      <div className="mt-6">
        <button
          onClick={handleLogout}
          className="px-4 py-1 bg-red-500 text-white rounded"
        >
          Logout
        </button>
      </div>

      {/* Posts grid placeholder */}
      <div className="mt-10 grid grid-cols-3 gap-2">
        {[...Array(6)].map((_, i) => (
          <div key={i} className="bg-gray-200 h-24 rounded"></div>
        ))}
      </div>
    </div>
  );
}
